#!/bin/bash
function sshd_config(){
echo "
Port 443
PermitRootLogin yes
PubkeyAuthentication yes
PasswordAuthentication yes
Banner /etc/bannerssh
" >> /etc/ssh/sshd_config
}
function configurarsquid(){
echo -e "\033[1;31mPara que la instalacion sea correcta se necesita una ip.
Digite su ip !\033[0m"
read -p ": " ip
echo -e "\033[1;37mConfigurando, Espere...\033[0m"
apt-get update 1> /dev/null 2> /dev/null
apt-get install -y squid3 1> /dev/null 2> /dev/null

service apache2 stop 1> /dev/null 2> /dev/null
chattr -i /etc/ssh/sshd_config > /dev/null 2> /dev/null
service ssh restart 1> /dev/null 2> /dev/null

echo "http_port 80
http_port 8080
http_port 8799
http_port 3128
visible_hostname vpsadmin
acl ip dstdomain $ip
http_access allow ip" > /etc/squid/squid.conf
echo 'acl accept dstdomain -i "/etc/payloads"
http_access allow accept
acl local dstdomain localhost
http_access allow local
acl iplocal dstdomain 127.0.0.1
http_access allow iplocal
http_access deny all' >> /etc/squid/squid.conf
service squid restart 1> /dev/null 2> /dev/null

apt-get -y install dropbear
sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear
sed -i 's/DROPBEAR_PORT=22/DROPBEAR_PORT=444/g' /etc/default/dropbear
sed -i 's/DROPBEAR_EXTRA_ARGS=/DROPBEAR_EXTRA_ARGS="-p 80"/g' /etc/default/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
service ssh restart
service dropbear restart

badvpn_install
echo -e "\033[01;31mFinalizado !! \033[0m"
echo -e "\033[01;31mPuertos Agregados: \033[0m"
echo -e "\033[01;31mSquid: 80/8080/8799/3128 \033[0m"
echo -e "\033[01;31mDropbear: 444 \033[0m"
echo -e "\033[01;31mBadVpn: 7300 \033[0m"
exit 0
}
function badvpn_install(){
bash badvpn
}
function menu_badvpn(){
echo -e "\033[1;33mBadVpn\033[1;30m
1) Activar juegos online, llamadas whatsapp
2) Parar servicio de badvpn"
read -p "opcion: " option
if [ $option -eq 1 ]; then
badvpn start
exit 0
fi

if [ $option -eq 2 ]; then
badvpn stop
exit
fi
}
function webmin(){
cd
wget https://raw.githubusercontent.com/angelbanderasl/vps/master/webmin && bash webmin
rm -r webmin
}
function banner(){
cd
wget https://raw.githubusercontent.com/angelbanderasl/vps/master/banner && bash banner
rm -r banner
}
function detallesdelsistema(){
if [ -f /proc/cpuinfo ]
then
echo -e "\n\033[1;30mProcessador\033[0m"
modelo=$(cat /proc/cpuinfo |grep "model name" |uniq |awk -F : {'print $2'})
cpucores=$(cat /proc/cpuinfo |grep "cpu cores" |uniq |awk -F : {'print $2'})
cache=$(cat /proc/cpuinfo |grep "cache size" |uniq |awk -F : {'print $2'})
echo -e "\033[1;32mModelo:\033[0m$modelo"
echo -e "\033[1;32mNucleos:\033[0m$cpucores"
echo -e "\033[1;32mMemoria Cache:\033[0m$cache"
echo -e "\033[1;32mArquitetura: \033[0m$(uname -p)"
else
echo -e "\033[1;30mProcessador\033[0m"
echo "No fue posible encontrar /proc/cpuinfo"
fi
if [ -f /etc/lsb-release ]
then
echo -e "\n\033[1;30mSistema Operativo\033[0m"
name=$(cat /etc/lsb-release |grep DESCRIPTION |awk -F = {'print $2'})
codename=$(cat /etc/lsb-release |grep CODENAME |awk -F = {'print $2'})
echo -e "\033[1;32mNome: \033[0m$name"
echo -e "\033[1;32mCodeName: \033[0m$codename"
echo -e "\033[1;32mKernel: \033[0m$(uname -s)"
echo -e "\033[1;32mKernel Release: \033[0m$(uname -r)"
if [ -f /etc/os-release ]
then
devlike=$(cat /etc/os-release |grep LIKE |awk -F = {'print $2'})
echo -e "\033[1;32mDerivado del sistema OS: \033[0m$devlike"
fi
else
echo -e "\n\033[1;30mSistema Operativo\033[0m"
echo "No fue posible encontrar /etc/lsb-release"
fi
if free 1>/dev/null 2>/dev/null
then
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i mem |awk {'print $2'}) MB | $(( $(free -m |grep -i mem |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEn Uso: \033[0m$(free -m |grep -i mem |awk {'print $3'}) MB | $(( $(free -m |grep -i mem |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLibre: \033[0m$(free -m |grep -i mem |awk {'print $4'}) MB | $(( $(free -m |grep -i mem |awk {'print $4'}) / 1024 )) GB"
echo -e "\n\033[1;30mSwap\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i swap |awk {'print $2'}) MB | $(( $(free -m |grep -i swap |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEn Uso: \033[0m$(free -m |grep -i swap |awk {'print $3'}) MB | $(( $(free -m |grep -i swap |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLibre: \033[0m$(free -m |grep -i swap |awk {'print $4'}) MB | $(( $(free -m |grep -i swap |awk {'print $4'}) / 1024 )) GB"
else
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo "No fue posible obtener informacion sobre la memoria RAM"
fi
}
function detallesusuarios(){
clear

echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
echo -e "\033[1;37m Usuario               Contraseña        Fecha E.          Logins S. \033[0m"
echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |sort |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do

if cat /etc/vpsdirectorio/limite/$users > /dev/null 2> /dev/null
then
limitecs=$(cat /etc/vpsdirectorio/limite/$users)
else
limitecs="null"
fi

if  senha=$(cat /etc/vpsdirectorio/contraseña/$users > /dev/null 2> /dev/null)
then
senha=$(cat /etc/vpsdirectorio/contraseña/$users)
else
senha="null"
fi

data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
date="Nunca"
fi
detalhesdata=$(printf '%-18s' "$data")
detalheslimit=$(printf '%-10s' "$limitecs")
detalhes=$(printf ' %-21s' "$users")
detalhespass=$(printf '%-18s' "$senha")
echo -e "\033[1;33m$detalhes $detalhespass $detalhesdata $detalheslimit\033[0m"
echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
done
}
function backup_de_usuarios(){
clear
echo -e "\033[1;37mHaciendo Backup de Usuarios...\033[0m"
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`
do
if [ -e /etc/vpsdirectorio/contraseña/$user ]
then
pass=$(cat /etc/vpsdirectorio/contraseña/$user)
else
echo -e "\033[1;31mNo fue posible obtener la contraseña del usuario\033[1;37m ($user)"
read -p "Introduzca la contraseña manualmente o pulse ENTER: " pass
fi

if [ -e /etc/vpsdirectorio/limite/$user ]
then
limite=$(cat /etc/vpsdirectorio/limite/$user)
echo "$user:$pass:$limite" >> /etc/vpsdirectorio/backup
echo -e "\033[1;37mUser $user Backup [\033[1;31mOK\033[1;37m]\033[0m"
else
echo "$user:$pass" >> /etc/vpsdirectorio/backup
echo -e "\033[1;37mUser $user Backup [\033[1;31mOK\033[1;37m]\033[0m"
fi
done
echo " "
echo -e "\033[1;31mBackup Completado !!!\033[0m"
echo " "
echo -e "\033[1;37mLa informacion de los usuarios se encuentra en el archivo \033[1;31m /etc/vpsdirectorio/backup \033[1;37m
Guardelo para una futura restauracion\033[0m"
}
function restaurar_usuarios(){
echo -n "Escriba el directorio del archivo Backup: "
read arq
echo -e "\033[1;37mRestaurando Usuarios...\033[0m"

for user in `cat $arq`
do
usuario=$(echo "$user" |awk -F : '{print $1}')
senha=$(echo "$user" |awk -F : '{print $2}')
if cat /etc/passwd |grep $usuario: 1> /dev/null 2>/dev/null
then
echo " " > /dev/null
else
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
  if [ $? = 0 ]
  then
  limite=$(echo "$user" |awk -F : '{print $3}')
  useradd -M -s /bin/false $usuario
  (echo $pass ; echo $pass) | passwd $usuario > /dev/null 2> /dev/null
  limit $usuario $limite 1> /dev/null 2> /dev/null
  echo "$pass" > /etc/gerenciadorinfo/senha/$usuario
  else
  useradd -M -s /bin/false $usuario
  (echo $pass ; echo $pass) | passwd $usuario > /dev/null 2> /dev/null
  echo "$pass" > /etc/gerenciadorinfo/senha/$usuario
  fi
  echo -e "\033[1;37mUsuario: \033[1;31m$usuario \033[1;37mBackup: [\033[1;31mOk\033[1;37m]\033[0m"
fi
done
}
function menu_backup(){
echo -e "\033[1;33mBackup\033[1;30m
1) Crear respaldo de usuarios
2) Restaurar usuarios de un backup"
read -p "opcion: " option

if [ $option -eq 1 ]; then
backup_de_usuarios
exit 0
fi

if [ $option -eq 2 ]; then
restaurar_usuarios
exit
fi
}
function monitoriar(){
clear
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
echo -e " \033[47;30m   Usuario                :               Conexiones S   \033[0m"
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
for usur in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9] |sort`; do
if [ -f /etc/vpsdirectorio/limite/$usur ]; then
limite=$(cat -n /etc/vpsdirectorio/limite/$usur |awk '$1 = 1 {print $2}')
else
limite=null
fi
usurnum="$(ps -u $usur |grep sshd |wc -l)\033[1;30m/\033[1;33m$limite"
echo -e "\033[1;33m    $(printf '%-41s%s' $usur $usurnum) \033[0m"
echo -e "\033[1;37m -------------------------------------------------------\033[0m"
done
}
function crearusuariodeprueba(){
mkdir /etc/vpsdirectorio/usuariosprueba 1>/dev/null 2>/dev/null
echo -e "   Usuarios de prueba"
for testus in $(ls /etc/vpsdirectorio/usuariosprueba |sort |sed 's/.sh//g')
do
echo "$testus"
done
printf "\n"
printf "Nombre del usuario: "; read nome
printf "Contraseña del usuario: "; read pass
echo -e "\nUsa s = segundos, m = minutos, h = horas e d = dias Ejemplo: 14s ."
printf "Cuanto tiempo la cuenta $nome debe durar: ";read tempoin
tempo=$(echo "$tempoin" |sed 's/ //g')
useradd -M -s /bin/false $nome
(echo $pass;echo $pass) |passwd $nome 1>/dev/null 2>/dev/null
echo "#!/bin/bash
sleep $tempo
kill"' $(ps -u '"$nome |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $nome
rm -rf /etc/vpsdirectorio/usuariosprueba/$nome.sh
exit" > /etc/vpsdirectorio/usuariosprueba/$nome.sh
echo -e "Usuario: $nome
Contraseña: $pass
Valido por: $tempo\n
Despues de expirar, los usuarios seran desconectados."
bash /etc/vpsdirectorio/usuariosprueba/$nome.sh &
exit
}
function removerexpirados(){
clear
echo -e "         \033[1;33mRemover Usuarios Expirados\033[0m"
datahoje=$(date +%s)
for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
do
dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
if [[ $dataexp == ' never' ]]; then
id > /dev/null 2>/dev/null
else
dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
dataexpnum=$(date '+%s' -d"$dataexp")
fi
if [[ $dataexpnum < $datahoje ]]; then
printf "\033[1;31m"
printf '%-41s' $user
printf "\033[0m"
echo "Usuario expirado eliminado"
kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
else
printf "\033[1;32m"
printf '%-41s' $user
printf "\033[0m"
echo $dataexpn
fi
done
}
function cambiarnombre(){
printf "Usuario al cual desea cambiarle el nombre: "; read user
if cat /etc/passwd |grep $user: >/dev/null 2>/dev/null
then
printf ""
else
echo "Usuario no existe"
exit
fi
printf "Nuevo nombre para el usuario $user: "; read nome
usermod -l $nome $user 1>/dev/null 2>/dev/null
echo -e "\nUsuario: $user, Nuevo nombre: $nome."
mv /etc/vpsdirectorio/contraseña/$user /etc/vpsdirectorio/contraseña/$nome
mv /etc/vpsdirectorio/limite/$user /etc/vpsdirectorio/limite/$nome
mv /etc/vpsdirectorio/limite/$user.sh /etc/vpsdirectorio/limite/$nome.sh
pids=$(ps -u $user |awk {'print $1'})
kill "$pids" >/dev/null 2>/dev/null
exit
}

clear
if [[ $1 == "" ]]
then
echo -e "\033[1;37m    Administrador Vps para ubuntu 16.04 © MX (Angel Banderas) \033[0m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir pulse Ctrl + C\033[0;32m
[\033[1;30m01\033[0;32m] Squid_SSH_Dropbear... \033[1;30m(Squid, OpenSSH, Dropbear, Shadowsocks y BadVpn)\033[0;32m
[\033[1;30m02\033[0;32m] Speedtest \033[1;30m(Prueba de conexion [velocidad de banda])\033[0;32m
[\033[1;30m03\033[0;32m] Ver_Puertos \033[1;30m(Ver puertos abiertos)\033[0;32m
[\033[1;30m04\033[0;32m] Crear_Usuario \033[1;30m(Crear usuarios)\033[0;32m
[\033[1;30m05\033[0;32m] Crear_Prueba \033[1;30m(Crear usuarios de corta duracion)\033[0;32m
[\033[1;30m06\033[0;32m] Eliminar_Usuario \033[1;30m(Menu Eliminar, Desconectar, etc)\033[0;32m
[\033[1;30m07\033[0;32m] Redefinir_Usuario \033[1;30m(Cambiar fecha, contraseña, etc)\033[0;32m
[\033[1;30m08\033[0;32m] BadVpn \033[1;30m(Activar y desactivar BadVpn)\033[0;32m
[\033[1;30m09\033[0;32m] Webmin \033[1;30m(Instalar Webmin)\033[0;32m
[\033[1;30m10\033[0;32m] Dropbear \033[1;30m(Ver usuarios conectados en Dropbear)\033[0;32m
[\033[1;30m11\033[0;32m] Banner \033[1;30m(Banner preconfigurado)\033[0;32m
[\033[1;30m12\033[0;32m] Sistema_Detalles \033[1;30m(Detalles sobre el Sistema)\033[0;32m
[\033[1;30m13\033[0;32m] Usuarios_Detalles \033[1;30m(Informacion sobre los usuarios !!)\033[0;32m
[\033[1;30m14\033[0;32m] Backup \033[1;30m(Respaldo y restauracion de usuarios)\033[0;32m
[\033[1;30m15\033[0;32m] Monitoriar \033[1;30m(Monitoriar conexiones)\033[0m\033[0;32m
[\033[1;30m16\033[0;32m] Remover_expirados \033[1;30m(Remover usuarios expirados)\033[0;32m
[\033[1;30m17\033[0;32m] Cambiar_Nombre \033[1;30m(Cambiar nombre de un usuario)\033[0;32m"

read -p ": " opcion
else
opcion=$1
fi
case $opcion in
  1 | 01 )
   configurarsquid;;
  2 | 02 )
  apt install python -y
  speedtest.py;;
  3 | 03 )
  netstat -tunlp;;
  4 | 04 )
  crearusuario;;
  5 | 05 ) 
  crearusuariodeprueba;;
  6 | 06 ) 
  eliminarusuario;;
  7 | 07 ) 
  redefinirusuario;;
  8 | 08 ) 
  menu_badvpn;;
  9 | 09 )
  webmin;;
  10)
  drop;;
  11)
  banner;;
  12)
  detallesdelsistema;;
  13)
  detallesusuarios;;
  14)
  menu_backup;;
  15)
  monitoriar;;
  16)
  removerexpirados;;
  17)
  cambiarnombre;;
esac
